### **Руководство по созданию и организации модулей, контроллеров и провайдеров в NestJS**

---

#### **Введение**

В этом разделе мы углубимся в структуру модулей, контроллеров и провайдеров в NestJS, изучим их назначение,
взаимодействие и преимущества. Эти компоненты являются основными строительными блоками любого приложения на NestJS,
что делает их понимание критически важным для разработчиков, особенно начинающих.
Также в данном уроке будет рассмотрено создание ресурса через CLI команду `nest generate resource`,
которая ускоряет процесс создания функциональных единиц кода.

> **Рекомендуется изучить [официальную документацию NestJS по модулям,
контроллерам и провайдерам](https://docs.nestjs.com/).**

---

### **1. Модули в NestJS**

Модуль в NestJS — это способ структурирования кода. Он позволяет разбивать приложение на логические части,
каждая из которых инкапсулирует определённую функциональность. Модуль может включать в себя контроллеры,
провайдеры и другие модули, позволяя организовать код по смысловым блокам.

#### Пример: **Создание базового модуля `AppModule`**

Модуль в NestJS — это класс, декорированный `@Module`. Декоратор принимает объект с тремя основными параметрами:

- **imports** — массив импортируемых модулей.
- **controllers** — массив контроллеров, определяющих маршруты для обработки HTTP-запросов.
- **providers** — массив провайдеров, которые содержат бизнес-логику приложения.

```typescript
// app.module.ts
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';

@Module({
  imports: [],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

> **Примечание:** В данном примере `AppModule` импортирует `AppController` и `AppService`.
Эти компоненты будут доступны в рамках модуля, что позволяет инкапсулировать их функциональность.

---

### **2. Контроллеры**

Контроллеры в NestJS отвечают за обработку входящих HTTP-запросов и определяют маршруты (роуты),
а также логику обработки запросов. Контроллеры, как правило, используют декораторы для маршрутизации,
такие как `@Get()`, `@Post()` и `@Delete()`, чтобы определять маршруты для обработки запросов.

#### Пример: **Контроллер `AppController`**

```typescript
// app.controller.ts
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }
}
```

> **Пояснение:** В данном примере `AppController` имеет единственный маршрут для обработки `GET`-запроса
на корневой маршрут (`/`). Метод `getHello()` обращается к `AppService` и возвращает строку, полученную от сервиса.

---

### **3. Провайдеры**

Провайдеры содержат бизнес-логику приложения и могут быть инжектированы в контроллеры или другие провайдеры.
Провайдеры определяются с помощью декоратора `@Injectable()`, что позволяет инжектировать их в другие части
приложения благодаря системе Dependency Injection NestJS.

#### Пример: **Создание сервиса `AppService`**

```typescript
// app.service.ts
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}
```

> **Пояснение:** `AppService` предоставляет метод `getHello()`, возвращающий строку `"Hello World!"`.
Этот сервис инжектируется в контроллер, что упрощает использование бизнес-логики в контроллере и улучшает
модульность приложения.

---

### **4. Использование NestJS CLI для создания ресурса**

NestJS CLI предлагает команду `generate`, которая позволяет быстро создавать контроллеры,
сервисы и другие компоненты. Для создания модуля с контроллером и сервисом можно использовать команду:

```bash
nest g res users --no-spec
```

> **Примечание:** Эта команда создаст модуль `Users` в папке `src`, а также автоматически сгенерирует
контроллер и сервис.

---

### **5. Детали структуры ресурса**

После генерации ресурса `Users`, в папке `src/users` будут следующие файлы:

- `users.module.ts` — основной модуль.
- `users.controller.ts` — контроллер для маршрутов, связанных с пользователями.
- `users.service.ts` — сервис для реализации бизнес-логики.
- `user.entity.ts` — сущность пользователя (модель).
- `create-user.dto.ts` и `update-user.dto.ts` — DTO для создания и обновления данных пользователя.

---

### **6. Взаимодействие между модулями**

Модули могут взаимодействовать друг с другом, используя импорт других модулей. Главный модуль, например `AppModule`,
включает в себя все модули приложения, связывая их между собой.

```typescript
// app.module.ts
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { UsersModule } from './users/users.module';

@Module({
  imports: [UsersModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

> **Примечание:** Взаимодействие между модулями позволяет использовать один модуль внутри другого.
Для предотвращения циклических зависимостей можно использовать `@forwardRef()`.
Подробности см. в документации: [NestJS Circular Dependencies](https://docs.nestjs.com/fundamentals/circular-dependency).

---

### **7. Запуск и проверка работы**

Для запуска приложения используйте команду:

```bash
npm run start:dev
```

> **Примечание:** В логах терминала можно будет увидеть маршруты, созданные для модуля `Users` (`/users`).
Эти маршруты уже доступны благодаря файлам контроллера и сервиса, автоматически созданным CLI.

---

### **Заключение**

Теперь, когда мы изучили базовую структуру NestJS, создавая модули, контроллеры и провайдеры,
а также освоили процесс генерации ресурсов с помощью CLI, можно смело переходить к более сложным темам.
В следующих уроках мы обсудим работу с базами данных, связь между модулями и концепции,
такие как **Dependency Injection** и **Data Transfer Object (DTO)**.

> **Рекомендуется также ознакомиться с документацией по [модулям](https://docs.nestjs.com/modules)
и [провайдерам](https://docs.nestjs.com/providers).**
