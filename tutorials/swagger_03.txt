### **Руководство по генерации документации Swagger и созданию модулей в NestJS**

---

#### **Краткий обзор предыдущего урока**

В предыдущем уроке мы разобрали процесс создания REST API с использованием NestJS CLI и посмотрели,
как автоматически интегрируются новые модули в главный `AppModule`. Основное внимание было уделено
настройке CRUD-операций с помощью методов контроллера и использованию встроенных возможностей NestJS для
организации кода.

---

### **1. Документация Swagger и её значение**

Swagger — это мощный инструмент для автоматического создания документации к API на основе аннотаций кода.
Используя Swagger, можно динамически генерировать документацию, что позволяет разработчикам и клиентам видеть
текущие API-эндпоинты и их параметры, проверять их и тестировать без написания отдельной документации.
Кроме того, поддержка Swagger в NestJS позволяет легко интегрировать этот инструмент в проект,
добавляя минимальные изменения в структуру кода.

---

### **2. Установка модуля Swagger**

Чтобы начать работу со Swagger, установите необходимый пакет:

```bash
npm install --save @nestjs/swagger
```

Эта команда добавит в проект пакет `@nestjs/swagger`, обеспечивающий связь между NestJS и Swagger и
позволяющий использовать различные декораторы для описания моделей данных и методов API.

> **Пояснение:** Установка `@nestjs/swagger` даёт возможность добавлять декораторы в классы и методы,
которые Swagger будет использовать для генерации документации. Эта установка обязательна для корректной
интеграции Swagger.

---

### **3. Конфигурация Swagger в `main.ts`**

После установки пакета необходимо добавить настройки для Swagger в главный файл приложения, обычно это `main.ts`.
Здесь мы определяем конфигурацию для Swagger, используя `DocumentBuilder` и настраиваем базовую информацию,
такую как название и версию API.

#### Пример: Настройка Swagger в `main.ts`

```typescript
// main.ts
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Настройка конфигурации Swagger
  const config = new DocumentBuilder()
    .setTitle('Пример API для приложения')
    .setDescription('Документация для API, работающего с сущностью пользователя')
    .setVersion('1.0')
    .addBearerAuth({
      in: 'header',
      type: 'http',
      scheme: 'bearer',
      bearerFormat: 'JWT',
    }) // Подключаем авторизацию через Bearer токен
    .build();

  const document = SwaggerModule.createDocument(app, config);

  // Подключение Swagger на адрес /api
  SwaggerModule.setup('api', app, document, {
    swaggerOptions: {
      docExpansion: 'list',
      defaultModelsExpandDepth: 1,
      persistAuthorization: true, // Сохраняет авторизацию при перезагрузке страницы
    },
  });

  await app.listen(3000);
}
bootstrap();
```

> **Пояснение:** Конфигурация Swagger начинается с создания объекта `config` через `DocumentBuilder`,
где указываются основные параметры, такие как заголовок API, описание и версия. Эти данные затем используются
для генерации документации с помощью `SwaggerModule.createDocument`.

Для более подробного изучения возможностей Swagger можно ознакомиться с [официальной документацией NestJS по
Swagger](https://docs.nestjs.com/openapi/introduction).

---

### **4. Запуск и проверка документации**

Теперь, после добавления конфигурации, при запуске приложения командой `npm run start:dev` документация будет
доступна по адресу [http://localhost:3000/api](http://localhost:3000/api).

Swagger автоматически сгенерирует интерфейс документации, позволяющий просматривать все эндпоинты,
отправлять запросы и видеть их параметры.

---

### **5. Подключение Swagger к контроллеру**

Swagger требует описания данных, передаваемых в запросах, чтобы корректно отображать их в документации.
Например, для создания нового пользователя можно добавить DTO (Data Transfer Object) и использовать
декораторы `@ApiProperty` для описания полей.

#### Пример: DTO для создания пользователя

```typescript
// create-user.dto.ts
import { ApiProperty } from '@nestjs/swagger';

export class CreateUserDto {
  @ApiProperty({ description: 'Имя пользователя', default: 'Ivan' })
  name: string;

  @ApiProperty({
    description: 'Электронная почта пользователя',
    default: 'ivan@gmail.com',
  })
  email: string;

  @ApiProperty({ description: 'Пароль пользователя', minLength: 8 })
  password: string;
}
```

> **Пояснение:** В этом примере каждое поле DTO описано с помощью `@ApiProperty`, где указаны описание,
значение по умолчанию, а также можно добавить ограничения, например, `minLength` или `required`. Swagger автоматически использует эти описания для генерации формы с полями при создании нового пользователя.

### **6. Подключение DTO к контроллеру**

Чтобы Swagger отобразил DTO в документации для метода создания пользователя, необходимо связать DTO с
маршрутом в контроллере.

```typescript
// users.controller.ts
import { Controller, Post, Body } from '@nestjs/common';
import { ApiTags } from '@nestjs/swagger';
import { CreateUserDto } from './dto/create-user.dto';
import { UsersService } from './users.service';

@ApiTags('users') // Указываем тег для группировки маршрутов
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  create(@Body() createUserDto: CreateUserDto) {
    return this.usersService.create(createUserDto);
  }
}
```

> **Примечание:** Использование `@ApiTags` позволяет группировать все эндпоинты контроллера под одним
тегом `users`. Это помогает организовать документацию, делая её более понятной и доступной.

---

### **7. Параметры `@ApiProperty` и другие декораторы Swagger**

Декоратор `@ApiProperty` поддерживает ряд параметров, таких как `description` (описание поля),
`default` (значение по умолчанию), `required` (обязательность поля), `minLength` и
`maxLength` (ограничения на длину строки). Эти параметры позволяют гибко настроить отображение полей в документации.

Кроме того, доступны и другие декораторы Swagger для параметров, запросов и ответов:

- **@ApiQuery**: для описания параметров запроса
- **@ApiResponse**: для описания структуры ответов
- **@ApiParam**: для описания параметров пути
- **@ApiBearerAuth**: для авторизации через Bearer токен

> **Примечание:** Использование этих декораторов позволяет создать детализированную документацию,
в которой указаны все параметры запросов и структурированные ответы, что делает документацию API полноценной и понятной.

---

### **8. Обход использования `@ApiProperty` и автоматизация создания документации**

Чтобы не добавлять `@ApiProperty` вручную к каждому DTO, можно использовать плагин Swagger,
который автоматически добавляет свойства в документацию. Для этого добавьте следующий фрагмент в файл `nest-cli.json`:

```json
{
  "compilerOptions": {
    "plugins": ["@nestjs/swagger"]
  }
}
```

> **Пояснение:** С использованием этого плагина Swagger автоматически обнаруживает все поля DTO и добавляет
их в документацию, что значительно упрощает разработку и поддержание кода.

---

### **9. Дополнительные настройки в `swaggerOptions`**

Помимо основных параметров, Swagger поддерживает различные настройки в `swaggerOptions`,
которые влияют на поведение и отображение документации:

- **docExpansion**: устанавливает, как раскрывать секции документации (`none`, `list`, `full`)
- **defaultModelsExpandDepth**: указывает глубину отображения вложенных моделей
- **persistAuthorization**: сохраняет авторизацию после перезагрузки страницы (удобно при тестировании)

Пример:

```typescript
SwaggerModule.setup('api', app, document, {
  swaggerOptions: {
    docExpansion: 'none',
    persistAuthorization: true,
  },
});
```

---

### **Заключение**

На этом уроке мы настроили Swagger для автоматической генерации документации, узнали, как добавить
 описание к DTO и контроллерам, а также изучили расширенные параметры Swagger. Этот процесс документирования
 не только упрощает работу с API, но и улучшает взаимодействие с клиентами и тестирование.

> Дополнительную информацию можно найти в [официальной документации NestJS Swagger](https://docs.nestjs.com/openapi/introduction).

### Глава: Описание и обработка ответов в NestJS с помощью DTO

#### Краткий обзор предыдущего урока
На предыдущем уроке мы изучили, как создавать DTO (Data Transfer Object) для входящих данных,
использовавших такие поля, как имя, email и пароль, а также добавлять аннотации для Swagger,
чтобы создавать документацию для API.

#### Связь с новым уроком
Теперь мы сосредоточимся на описании структур ответов API с помощью DTO, рассмотрим обработку различных
типов ответов (успешные и ошибки) и узнаем, как сгенерировать документацию для ответов API в Swagger.

---

### Создание DTO для описания структуры ответов API

Использование DTO для описания структуры ответов помогает документировать, какие именно данные вернёт API,
и тем самым облегчает разработку, тестирование и поддержку.

##### Создание `UserResponseDto`
Чтобы структурировать ответ для сущности пользователя, создадим `UserResponseDto`, содержащий нужные поля:
1. Создайте папку `users/dto/res`, чтобы отделить DTO для описания входных и выходных данных.
2. В этой папке создайте файл `user.response.dto.ts`, который будет описывать структуру ответа для пользователя.

```typescript
import { ApiProperty } from '@nestjs/swagger';

export class UserResponseDto {
  @ApiProperty() // Описание уникального идентификатора
  id: string;

  @ApiProperty({ description: 'Имя пользователя', default: 'Ivan' }) // Указание описания и значения по умолчанию
  name: string;

  @ApiProperty({
    description: 'Email пользователя',
    default: 'ivan@gmail.com',
  }) // Указание описания и значения по умолчанию
  email: string;

  @ApiProperty() // Пароль пользователя
  password: string;
}
```

> Пояснение: Декоратор `@ApiProperty` позволяет описывать каждое поле в `UserResponseDto`,
делая его доступным для Swagger. Если декоратор не указан, Swagger не сможет отобразить это поле в документации.

---

### Добавление DTO для описания структуры ответов в контроллер

Теперь мы можем использовать наш `UserResponseDto` в контроллере для описания успешного ответа.

#### Пример кода
```typescript
import {
  Body,
  Controller,
  Post,
} from '@nestjs/common';
import {
  ApiConflictResponse,
  ApiCreatedResponse,
  ApiTags,
} from '@nestjs/swagger';

import { CreateUserDto } from './dto/req/create-user.dto';
import { UserResponseDto } from './dto/res/user.response.dto';
import { UsersService } from './users.service';

@ApiTags('users') // Указание категории для Swagger-документации
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  @ApiCreatedResponse({ type: UserResponseDto }) // Описание успешного ответа
  @ApiConflictResponse({ description: 'User already exists' }) // Описание ответа при конфликте
  create(@Body() createUserDto: CreateUserDto): UserResponseDto {
    return this.usersService.create(createUserDto) as UserResponseDto;
  }
}
```

> Пояснение: Аннотация `@ApiCreatedResponse` позволяет указать успешный ответ, который будет отображен в документации.
Аннотация `@ApiConflictResponse` описывает возможную ошибку при попытке создать уже существующего пользователя.

---

### Обработка различных типов ответов и ошибок

Чтобы API был максимально информативен, можно добавить описание других возможных ответов, например,
«404 Not Found» или «409 Conflict».

```typescript
import { ApiNotFoundResponse } from '@nestjs/swagger';

@Get(':id')
@ApiNotFoundResponse({ description: 'User not found' }) // Ответ, если пользователь не найден
findOne(@Param('id') id: string) {
  return this.usersService.findOne(+id);
}
```

> Пояснение: Использование `@ApiNotFoundResponse` помогает указать ответ, если запрашиваемый ресурс не найден.
Это особенно полезно для создания более полной документации в Swagger.

---

### Автоматическая генерация метаданных с помощью плагина

Добавление метаданных вручную для каждого DTO может быть трудоёмким процессом. Чтобы автоматизировать это,
можно использовать плагин `@nestjs/swagger`, который будет собирать метаданные автоматически,
основываясь на типах данных.

1. Откройте файл `nest-cli.json` и добавьте параметр `"plugins": ["@nestjs/swagger"]`:

```json
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true,
    "plugins": ["@nestjs/swagger"]
  }
}
```

2. Благодаря этому плагину, `@ApiProperty()` можно не писать везде, так как плагин соберёт метаданные на основе типов.
Поля, требующие дополнительного описания (например, пример или значение по умолчанию), можно аннотировать отдельно.

3. В Swagger поля, помеченные `?`, будут отображаться как необязательные (без звёздочки).

#### Пример

```typescript
export class OptionalUserResponseDto {
  @ApiProperty({ example: 'john@example.com' }) // Пример использования описания поля
  email: string;

  // Поле phoneNumber будет отображено в Swagger как необязательное
  phoneNumber?: string;
}
```

> Пояснение: В этом примере `email` аннотировано с примером данных. Поле `phoneNumber` автоматически
становится необязательным в документации, что обозначает это свойство в Swagger как опциональное.

---

### Заключение

Мы рассмотрели:
- Создание DTO для описания структуры ответов.
- Описание успешных и ошибочных ответов.
- Использование плагина `@nestjs/swagger` для автоматической генерации метаданных и упрощения структуры кода.

Swagger и DTO делают процесс документирования API более простым и прозрачным.
Данный подход также помогает организовать и стандартизировать ответы от API,
что особенно полезно при расширении функционала.

**Ссылка на документацию:**
- [NestJS Swagger](https://docs.nestjs.com/openapi/introduction)
