### Создание Docker-контейнеров для проекта NestJS

Инструкция по установке Docker на Windows

Docker — это инструмент, который позволяет запускать приложения в изолированных контейнерах,
что удобно для разработки и тестирования. На Windows его можно установить с использованием Docker Desktop,
но для этого требуется минимум Windows 10 и наличие некоторых дополнительных функций,
таких как WSL (Windows Subsystem for Linux).

 Шаг 1. Подготовка системы

Убедитесь, что у вас установлена Windows 10 или более поздняя версия, и что на компьютере установлены все обновления.
Это важно, так как Docker использует современные технологии виртуализации, которые могут не работать на старых
версиях операционной системы.

Шаг 2. Скачивание Docker Desktop

Перейдите по [этой ссылке](https://docs.docker.com/desktop/install/windows-install/) на официальный сайт Docker и
скачайте установочный файл Docker Desktop for Windows (x86_64). Это версия для вашей операционной системы,
которая поддерживает работу с WSL.

Шаг 3. Установка WSL

Docker для Windows использует WSL 2 для запуска контейнеров. Для включения WSL выполните следующие действия:

1. Откройте PowerShell от имени администратора. Для этого нажмите правой кнопкой мыши на меню «Пуск» и
выберите PowerShell (Admin).

2. Вставьте команду для установки WSL:

   wsl --install

   Эта команда включает подсистему Windows для Linux (WSL) и автоматически устанавливает дистрибутив Ubuntu Linux.

3. После выполнения команды перезагрузите компьютер, чтобы изменения вступили в силу.

4. После перезагрузки появится окно установки Ubuntu. Подождите, пока установка завершится.
Если процесс установки прерывается, зайдите в Microsoft Store, найдите и установите Ubuntu вручную.

 Шаг 4. Установка Docker Desktop

1. Запустите загруженный файл Docker Desktop Installer.

2. Следуйте инструкциям установщика, чтобы завершить установку Docker Desktop.

3. После завершения установки вам будет предложено перезагрузить компьютер. Перезагрузите его.

 Шаг 5. Настройка Docker

После перезагрузки откроется окно Docker Subscription Service Agreement.
Нажмите Accept для принятия лицензионного соглашения.

Далее вам предложат зарегистрировать Docker - аккаунт. Вы можете пропустить этот шаг,
нажав на skip в правом верхнем углу. После этого можно будет пропустить выбор роли (нажмите skip).

После этих шагов откроется основное окно Docker Desktop.

Шаг 6. Проверка установки Docker

Чтобы проверить, что Docker установлен и работает корректно, откройте командную строку (cmd) или PowerShell
и выполните команду:

docker run hello-world

Если установка прошла успешно, вы увидите сообщение:

Hello from Docker!
This message shows that your installation appears to be working correctly.

Это сообщение подтверждает, что Docker правильно настроен и работает.

Решение возможных проблем при установке

Если при установке Docker возникла ошибка, связанная с WSL2, скорее всего, проблема в том,
что на вашем компьютере не включена виртуализация. Вот как это исправить:

1. Включение виртуализации в BIOS

- Перезагрузите компьютер и войдите в BIOS или UEFI (для этого при включении компьютера нужно
нажать одну из клавиш: Del, F2,F10 или Esc — это зависит от модели компьютера).

-Найдите опцию виртуализации, которая может называться Intel Virtualization Technology (VT-x) для
процессоров Intel или SVM Mode для AMD, и включите её.

-Сохраните изменения и перезагрузите компьютер.

2. Включение платформы виртуальной машины

-Откройте PowerShell от имени администратора.

-Введите следующую команду, чтобы включить компонент "Платформа виртуальной машины":

   dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart


-Чтобы включить WSL, выполните команду:

   wsl --install --no-distribution


3. Включение WSL 2 по умолчанию

- В PowerShell выполните команду:

   wsl --set-default-version 2

4. Переустановка Docker Desktop

Если после выполнения вышеуказанных шагов проблема не решилась, попробуйте переустановить Docker Desktop.

После всех этих шагов перезагрузите компьютер и снова попробуйте запустить Docker.
///////////////////////////////////

### 1. Создание конфигурации Docker Compose для проекта

Для запуска нескольких сервисов в одном окружении мы будем использовать **Docker Compose** — инструмент,
который позволяет описывать конфигурацию контейнеров в одном файле и запускать их вместе. Начнем с создания
файла `docker-compose-local.yaml` в корневой папке проекта, который настроит контейнеры
для **PostgreSQL**, **Redis**, и **MinIO** (S3-совместимое хранилище).

#### Создание `docker-compose-local.yaml`

Ниже представлена конфигурация, которую мы поместим в `docker-compose-local.yaml`:

```yaml
version: '3.8'

services:
  nest-js_classes-postgres:
    image: postgres:16.1
    ports:
      - '${POSTGRES_PORT:-5433}:5432'
    environment:
      POSTGRES_USER: '${POSTGRES_USER:-user}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-password}'
      POSTGRES_DB: '${POSTGRES_DB:-nest-js_classes}'
    volumes:
      - nest-js_classes-api-db:/var/lib/postgresql/data

  nest-js_classes-redis:
    image: redis:7.2.3
    ports:
      - '${REDIS_PORT:-6379}:6379'
    command: >
      --requirepass '${REDIS_PASSWORD:-redispass}'
    restart: unless-stopped

  nest-js_classes-s3:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    restart: unless-stopped
    ports:
      - "8000:9000"
      - "8001:9001"
    volumes:
      - nest-js_classes-api-s3:/usr/src/app/s3
    environment:
      - MINIO_ROOT_USER=user            # AWS_S3_ACCESS_KEY
      - MINIO_ROOT_PASSWORD=password    # AWS_S3_SECRET_KEY

volumes:
  nest-js_classes-api-db:
  nest-js_classes-api-s3:
```

### Описание конфигурации

1. **PostgreSQL сервис (nest-js_classes-postgres)**:
   - **Образ**: использует PostgreSQL версии `16.1`, который содержит последние обновления безопасности и
   функциональности.
   - **Порты**: внешний порт `5433` маппится на стандартный внутренний порт `5432`, чтобы предоставить доступ к
   базе данных из локальной среды.
   - **Переменные окружения**:
     - `POSTGRES_USER`: задает имя пользователя базы данных.
     - `POSTGRES_PASSWORD`: задает пароль.
     - `POSTGRES_DB`: имя базы данных.
   - **Том (volumes)**: контейнер будет сохранять данные PostgreSQL в `nest-js_classes-api-db`,
   чтобы данные не терялись при перезапуске контейнера.

2. **Redis сервис (nest-js_classes-redis)**:
   - **Образ**: Redis версии `7.2.3`, который поддерживает новейшие функции кэширования.
   - **Порты**: порт `6379` открыт для подключения к Redis из локальной среды.
   - **Команда**: при запуске Redis требует пароль, который задается в переменной окружения `REDIS_PASSWORD`.
   - **Политика перезапуска**: `restart: unless-stopped` означает, что контейнер будет автоматически перезапущен,
   если завершится с ошибкой.

3. **MinIO сервис (nest-js_classes-s3)**:
   - **Образ**: MinIO — легковесное S3-совместимое решение для локального использования.
   Поддерживает основные функции S3, что делает его удобным для тестирования.
   - **Команда**: запускает сервер MinIO и указывает адрес для административной консоли.
   - **Порты**: порт `8000` маппится на `9000` (доступ к MinIO), а `8001` — на `9001` (адрес консоли управления).
   - **Том**: `nest-js_classes-api-s3` для сохранения данных, загруженных в MinIO.
   - **Переменные окружения**:
     - `MINIO_ROOT_USER`: задает имя пользователя для доступа к MinIO (аналогично AWS_ACCESS_KEY).
     - `MINIO_ROOT_PASSWORD`: задает пароль для пользователя (аналог AWS_SECRET_KEY).

**Документация по Docker Compose** с более подробными настройками доступна [здесь](https://docs.docker.com/compose/).

---

### 2. Запуск контейнеров

Чтобы запустить все контейнеры, описанные в `docker-compose-local.yaml`, используется команда:

```bash
docker compose -f docker-compose-local.yaml up -d
```

Эта команда создает контейнеры и запускает их в **фоновом режиме** (опция `-d`). Чтобы проверить состояние контейнеров,
можно использовать следующие команды:

- **`docker ps`**: отображает список всех активных контейнеров с информацией об их ID, образе и портах.
- **`docker compose logs`**: выводит логи для всех контейнеров, что удобно при отладке.
- **`docker stop <container_id>`**: останавливает контейнер по его ID.
- **`docker rm <container_id>`**: удаляет контейнер после его остановки.

---

### 3. Подключение к базе данных PostgreSQL

После запуска контейнеров подключимся к базе данных **PostgreSQL** с помощью данных из `docker-compose-local.yaml`.
Подключение можно выполнить через любой клиент для PostgreSQL, например **pgAdmin**, **DBeaver**, или команду `psql`:

- **Хост**: `localhost`
- **Порт**: `5433` (внешний порт)
- **Пользователь**: `user`
- **Пароль**: `password`
- **База данных**: `nest-js_classes`

Для подключения через командную строку PostgreSQL:

```bash
psql -h localhost -p 5433 -U user -d nest-js_classes
```

---

### 4. Работа с S3-совместимым хранилищем

Запущенный MinIO доступен по адресу `http://localhost:8001`. Подключиться можно с помощью **логина и пароля** из
конфигурации:

- **Пользователь**: `user`
- **Пароль**: `password`

Адрес MinIO предоставляет удобный веб-интерфейс для управления файлами. Он поддерживает операции,
аналогичные стандартному S3, что упрощает тестирование взаимодействия приложения с S3-совместимым хранилищем.

---

### 5. Создание файлов конфигурации окружения

Мы создадим файл `local.env` в папке `environments`, содержащий необходимые параметры:

```dotenv
POSTGRES_PORT=5433
POSTGRES_HOST=0.0.0.0
POSTGRES_USER=user
POSTGRES_PASSWORD=password
POSTGRES_DB=nest-js_classes

REDIS_HOST=0.0.0.0
REDIS_PASSWORD=redispass

MINIO_ROOT_USER=user
MINIO_ROOT_PASSWORD=password
```

**Для запуска приложения с этим окружением** можно добавить в `package.json` команду:

```json
"start:docker:local": "docker compose -f docker-compose-local.yaml up --build",
```

---

### Заключение

В этом уроке мы настроили Docker-контейнеры для проекта, что упростит работу с базой данных и S3-совместимым хранилищем.
Эти контейнеры также облегчат тестирование и развертывание проекта на различных этапах разработки.
**Продолжение следует в следующей части**.
