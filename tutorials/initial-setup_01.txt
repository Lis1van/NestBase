 Введение в NestJS

NestJS — это фреймворк для разработки серверных приложений на основе Node.js, который стремительно набирает популярность.
Хотя Express до сих пор остаётся более распространенным, NestJS предоставляет мощную архитектуру для создания
масштабируемых и модульных приложений, вдохновлённую подходами, использованными в Angular.

 Особенности NestJS
- Модульность: Архитектура NestJS основана на модулях, что позволяет легко управлять кодом и его зависимостями.
- Интеграция с TypeScript: NestJS изначально поддерживает TypeScript, что упрощает создание типизированного и
масштабируемого кода.
- Богатый функционал: Включает такие инструменты, как контроллеры, сервисы, провайдеры, фильтры исключений, пайпы,
интерсепторы и декораторы.
- Поддержка Express и Fastify: По умолчанию, NestJS работает на базе Express, но может быть сконфигурирован для работы
с Fastify.

---

Установка и настройка проекта

1. Установка NestJS CLI

   Сначала заходим на официальный сайт [NestJS](https://docs.nestjs.com/), где есть руководство и документация.
   Для начала установим CLI (Command Line Interface), который помогает создавать и управлять проектами NestJS.

   Запустите в консоли следующую команду для глобальной установки CLI:

   npm i -g @nestjs/cli

   Эта команда установит NestJS CLI глобально, что позволит вам использовать команды `nest` из любого места на
   вашем компьютере.

2. Создание нового проекта

   После установки CLI создаём новый проект:

   nest new project-name

   В этой команде `project-name` — это название вашего проекта. После запуска вас спросят, какой пакетный менеджер
   вы хотите использовать (npm или yarn). Выберите **npm**.

   Программа создаст стартовые файлы в папке с именем вашего проекта.

   **Пример переходов и управления директориями в консоли:**
   - Чтобы перейти в папку, где вы хотите создать проект:

     cd путь_к_папке

   - Чтобы создать папку, если её нет:

     mkdir имя_папки
     cd имя_папки

   - Если вы хотите установить NestJS в уже существующую папку, просто перейдите в неё через консоль и выполните
   команду установки.

3. Альтернативная установка через Git

   Можно создать проект, используя репозиторий-стартер на GitHub. Для этого выполните следующие команды:

   git clone https://github.com/nestjs/typescript-starter.git project
   cd project
   npm install
   npm run start


   - `git clone` — клонирует репозиторий с примером проекта в папку с именем `project`.
   - `cd project` — перемещает вас в директорию проекта.
   - `npm install` — устанавливает все зависимости, указанные в `package.json`.
   - `npm run start` — запускает проект.

4. Установка Husky и lint-staged

   Эти инструменты помогают поддерживать код чистым и стандартизированным. Husky позволяет автоматически запускать
   скрипты перед коммитами, а lint-staged проверяет только те файлы, которые были изменены.

   Для их установки используйте:

   npm i -D husky lint-staged

   Здесь `-D` означает, что пакеты будут установлены как **dev-зависимости**, то есть они используются только
   при разработке.

   После установки добавляем в `package.json` следующий код:

   "lint-staged": {
     "{src,apps,libs,test}/**/*.ts": "eslint --fix"
   }

   Это правило заставляет ESLint автоматически исправлять файлы с расширением `.ts`, которые находятся в
   директориях `src`, `apps`, `libs`, и `test`.

5. Инициализация Husky

   Запускаем команду:

   npx husky init

   Она инициализирует Husky и создаёт необходимые файлы и папки для его работы (например, папку `.husky`).

   Далее, в `package.json` добавляем скрипт:

   "prepare": "husky install"

   Это нужно для того, чтобы установить Husky при выполнении команды `npm install`. Запускаем команду для подготовки:

   npm run prepare


6. Настройка pre-commit hook

   В папке `.husky` откройте файл `pre-commit` и добавьте в него следующее содержимое:

   #!/bin/sh
   . "$(dirname "$0")/_/husky.sh"
   npx lint-staged

      Этот скрипт запускает проверку и исправление изменений перед каждым коммитом. Это полезно,
      чтобы ваш код всегда соответствовал стандартам качества.

7. Настройка ESLint

   В файле `.eslintrc.js` настройте ESLint следующим образом:

   module.exports = {
     parser: '@typescript-eslint/parser',
     parserOptions: {
       project: 'tsconfig.json',
       sourceType: 'module',
     },
     plugins: [
       '@typescript-eslint/eslint-plugin',
       'simple-import-sort',
       'import',
     ],
     extends: [
       'plugin:prettier/recommended',
       'plugin:@typescript-eslint/eslint-recommended',
       'plugin:@typescript-eslint/recommended',
       'prettier',
     ],
     root: true,
     env: {
       node: true,
       jest: true,
     },
     rules: {
       '@typescript-eslint/interface-name-prefix': 'off',
       '@typescript-eslint/explicit-function-return-type': 'off',
       '@typescript-eslint/explicit-module-boundary-types': 'off',
       'max-len': ['error', { code: 120 }],
       '@typescript-eslint/no-explicit-any': 'off',
       '@typescript-eslint/no-unused-vars': ['warn'],
       '@typescript-eslint/return-await': ['error', 'always'],
       'simple-import-sort/imports': 'error',
       'import/first': 'error',
       'import/newline-after-import': ['error', { count: 1 }],
       'import/no-duplicates': 'error',
       'prettier/prettier': ['error', { endOfLine: 'auto' }],
       'no-console': 'warn',
       'sort-imports': ['error', {
         ignoreCase: true,
         ignoreDeclarationSort: true,
         ignoreMemberSort: false,
         memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
         allowSeparatedGroups: false
       }],
     },
     ignorePatterns: ['.eslintrc.js', '**/*.generated.ts', '**/migrations/*.ts'],
   };

   Каждая секция:
   - `parser` и `parserOptions` — определяют, как TypeScript файлы будут анализироваться ESLint.
   - `plugins` — подключаемые модули для улучшения проверки кода.
   - `extends` — набор правил, который расширяет ESLint.
   - `rules` — индивидуальные правила, которые помогают поддерживать стиль кода.

   После этого устанавливаем недостающие плагины:

   npm i -D eslint-plugin-import eslint-plugin-simple-import-sort


8. Настройка ESLint в редакторе

   Если вы используете **IntelliJ IDEA**, перейдите в настройки проекта, найдите раздел **ESLint** и поставьте
   галочку напротив **Automatic ESLint Configuration**. Это активирует автоматическую проверку кода.

   В **VSCode** для этого нужно:
   - Установить плагин **ESLint** из Marketplace.
   - В настройках редактора активировать опцию **"ESLint: Enable"**.

---

Консольные команды NestJS позволяют вам эффективно управлять проектом и ускорять процесс разработки.
Вот полный список основных команд, которые предоставляет NestJS CLI, с кратким объяснением их назначения:

9. Консольные команды NestJS

1. **`nest new <project-name>`**
   Создаёт новый проект NestJS с именем, указанным вместо `<project-name>`. Эта команда автоматически создаёт
   стартовую структуру проекта и предоставляет выбор пакетного менеджера (npm или yarn).

   nest new my-app


2. **`nest generate <schematic> <name>` (или сокращённо `nest g <schematic> <name>`)**
   Используется для генерации новых сущностей (модулей, контроллеров, сервисов и других компонентов) в проекте.
   Основные схемы для генерации:
   - `module` — создаёт новый модуль.
   - `controller` — создаёт новый контроллер.
   - `service` — создаёт новый сервис.
   - `class` — создаёт новый класс.
   - `guard` — создаёт новый guard (защитник).
   - `middleware` — создаёт middleware.
   - `interceptor` — создаёт interceptor (перехватчик).
   - `filter` — создаёт фильтр для обработки исключений.
   - `gateway` — создаёт WebSocket gateway.
   - `resolver` — создаёт GraphQL resolver.

   Пример генерации модуля:

   nest g module users


3. **`nest build`**
   Компилирует проект в JavaScript. Результат сборки будет помещен в директорию `dist`.

   nest build


4. **`nest start`**
   Запускает сервер вашего приложения. Можно добавить флаг `--watch`, чтобы автоматически перезапускать сервер
   при изменениях в коде.

   nest start

   Или с флагом:

   nest start --watch


5. **`nest info`**
   Показывает информацию о текущем проекте: версии Nest, Node.js, TypeScript и других зависимостей.

   nest info


6. **`nest update`**
   Обновляет зависимости NestJS до последних версий, если это необходимо.

   nest update


7. **`nest add <package>`**
   Устанавливает и конфигурирует дополнительные пакеты в проекте. Например, для добавления поддержки GraphQL:

   nest add @nestjs/graphql


8. **`nest lint`**
   Запускает ESLint для проверки вашего кода на соответствие стандартам качества.

   nest lint


9. **`nest test`**
   Запускает тесты с использованием **Jest**, которые предустановлены в проекте. Также можно добавить флаг `--watch`,
   чтобы тесты автоматически перезапускались при изменении кода.

   nest test

   Или:

   nest test --watch


10. **`nest e2e`**
    Запускает end-to-end тесты для проекта.

    nest e2e


11. **`nest build --watch`**
    Запускает компиляцию в режиме "горячей перезагрузки" — автоматически пересобирает проект при изменении
    исходных файлов.

    nest build --watch


12. **`nest build --path <custom-output-path>`**
    Компилирует проект и сохраняет результат в указанную директорию вместо стандартной `dist`.

    nest build --path ./custom-directory


13. **`nest new --directory <path>`**
    Создаст новый проект NestJS в указанной директории.

    nest new my-app --directory ./projects


14. **`nest generate resource <name>`**
    Генерирует модуль, контроллер и сервис для REST API ресурса. Эта команда удобна для быстрого создания CRUD операций:

    nest g resource products


15. **`nest generate library <name>`**
    Создаст библиотеку (library), которая может быть переиспользована в других частях проекта или в других проектах.

    nest g library common


16. **`nest g app <name>`**
    Генерирует новый микросервис или приложение в рамках проекта. Эта команда используется для проектов,
    работающих с микросервисной архитектурой.

    nest g app orders


17. **`nest g sub-app <name>`**
    Генерирует под-приложение в существующем проекте, которое можно использовать в контексте микросервисов.

    nest g sub-app payments


---

Эти команды значительно облегчают работу с проектом NestJS, ускоряют процессы создания новых сущностей и управления ими,
а также помогают поддерживать код в актуальном состоянии.

## Полезные ссылки

- Официальная документация NestJS: [docs.nestjs.com](https://docs.nestjs.com/)
- Полный список команд CLI: [CLI commands](https://docs.nestjs.com/cli/overview)
